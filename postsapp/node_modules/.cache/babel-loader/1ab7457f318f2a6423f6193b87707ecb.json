{"ast":null,"code":"var _jsxFileName = \"/home/artem/PostMessageAppReact-/postsapp/src/components/Dashboard.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../../App.css\";\nimport InputArea from \"./components/InputArea\";\nimport PostsArea from \"./components/PostsArea\";\nimport { Grid } from \"@material-ui/core\";\nimport Header from \"../components/Header\";\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport Login from \"./components/Login\";\nimport Register from \"./components/Register\";\nconst [arr, setArray] = useState([]);\n\nconst addHandler = async ({\n  txt_content\n}) => {\n  try {\n    if (txt_content === \"\") return;\n    const body = {\n      txt_content\n    };\n    const response = await fetch(\"/api/posts/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n    getPosts();\n    console.log(response);\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n\nconst deleteHandler = async id => {\n  try {\n    const deletePost = await fetch(`/api/posts/${id}`, {\n      method: \"DELETE\"\n    });\n    console.log(deletePost);\n    setArray(arr.filter(arr => arr.post_id !== id));\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n\nconst updateHandler = async (id, {\n  txt_content\n}) => {\n  try {\n    if (txt_content === \"\") return;\n    const body = {\n      txt_content\n    };\n    const response = await fetch(`/api/posts/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    });\n    console.log(response);\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nconst getPosts = async () => {\n  try {\n    const response = await fetch(\"/api/posts/\");\n    const jsonData = await response.json();\n    setArray(jsonData);\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n\nuseEffect(() => {\n  getPosts();\n}, []);\n\nconst Dashboard = () => {\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputArea, {\n    addHandler: addHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(PostsArea, {\n    deleteHandler: deleteHandler,\n    updateHandler: updateHandler,\n    arr: arr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/artem/PostMessageAppReact-/postsapp/src/components/Dashboard.js"],"names":["React","useState","useEffect","InputArea","PostsArea","Grid","Header","BrowserRouter","Router","Switch","Route","Redirect","Login","Register","arr","setArray","addHandler","txt_content","body","response","fetch","method","headers","JSON","stringify","getPosts","console","log","error","message","deleteHandler","id","deletePost","filter","post_id","updateHandler","jsonData","json","Dashboard"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../../App.css\";\nimport InputArea from \"./components/InputArea\";\nimport PostsArea from \"./components/PostsArea\";\nimport { Grid } from \"@material-ui/core\";\nimport Header from \"../components/Header\";\nimport { BrowserRouter as Router, Switch, Route, Redirect} from \"react-router-dom\";\nimport Login from \"./components/Login\";\nimport Register from \"./components/Register\";\n\nconst [arr, setArray] = useState([]);\n\n  const addHandler = async ({ txt_content }) => {\n    try {\n      if (txt_content === \"\") return;\n      const body = { txt_content };\n      const response = await fetch(\"/api/posts/\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(body),\n      });\n      getPosts();\n      console.log(response);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  const deleteHandler = async (id) => {\n    try {\n      const deletePost = await fetch(`/api/posts/${id}`, {\n        method: \"DELETE\",\n      });\n      console.log(deletePost);\n      setArray(arr.filter((arr) => arr.post_id !== id));\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  const updateHandler = async (id, { txt_content }) => {\n    try {\n      if (txt_content === \"\") return;\n      const body = { txt_content };\n      const response = await fetch(`/api/posts/${id}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(body),\n      });\n      console.log(response);\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  const getPosts = async () => {\n    try {\n      const response = await fetch(\"/api/posts/\");\n      const jsonData = await response.json();\n      setArray(jsonData);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  useEffect(() => {\n    getPosts();\n  }, []);\n\nconst Dashboard = () => {\n    return (\n        <Grid container direction=\"column\">\n        <Grid item>\n          <Header />\n        </Grid>\n        <Grid item container>\n          <Grid item xs={2} />\n          <Grid item xs={8}>\n            <InputArea addHandler={addHandler} />\n            <PostsArea\n              deleteHandler={deleteHandler}\n              updateHandler={updateHandler}\n              arr={arr}\n            />\n          </Grid>\n          <Grid item xs={2} />\n        </Grid>\n      </Grid>\n    )\n}                                                                                                                                                                                                                                                                                                                                            \nexport default Dashboard; "]},"metadata":{},"sourceType":"module"}